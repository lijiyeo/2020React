{"version":3,"sources":["logo.svg","App.js","TodoList/List.js","TodoList/Input.js","TodoList/TodoList.js","serviceWorker.js","index.js"],"names":["module","exports","App","List","this","props","todo","length","map","item","idx","key","type","checked","onChange","changeTodo","onClick","delitem","done","Component","Input","handleInput","e","keyCode","addTodo","target","value","state","data","handleChange","setState","name","onKeyDown","placeholder","Todolist","addItem","msg","localStorage","setItem","JSON","stringify","finishItem","idtag","change","splice","change1","delItem","console","log","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20b2bad4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>待做</span><button>{this.props.todo.length}</button>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={item}><input type=\"checkbox\" checked={false} onChange={()=>this.props.changeTodo(idx,'todo')}></input>{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button onClick={()=>this.props.delitem(idx,'todo')}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n                <span>已完成&nbsp;&nbsp;&nbsp;</span><button>{this.props.done.length}</button>\r\n                <ul>\r\n                    {\r\n                        this.props.done.map((item,idx)=><li key={item}><input type=\"checkbox\" checked={true} onChange={()=>this.props.changeTodo(idx,'done')}></input>{item}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button onClick={()=>this.props.delitem(idx,'done')}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nexport default class Input extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n           data:''\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n\t\t\tthis.props.addTodo(e.target.value);\r\n\t\t\tthis.state.data='';\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            <span>TodoList</span><input name='data' onChange={(e)=>this.handleChange(e)} value={this.state.data} onKeyDown={(e)=>this.handleInput(e)} placeholder=\"请输入待做事项\" type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Todo from './List'\r\nimport Todoinput from './Input'\r\nexport default class Todolist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        var todo=JSON.parse(localStorage.getItem('todo')) ||[] ;\r\n        var done=JSON.parse(localStorage.getItem('done'))||[] ;\r\n        this.state = {\r\n            todo:todo,\r\n            done:done\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todo',\r\n            JSON.stringify(this.state.todo)\r\n        )\r\n        return true;\r\n    }\r\n\r\n    addItem=(msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        },()=>{\r\n            localStorage.setItem('todo', JSON.stringify(this.state.todo));\r\n        })\r\n    }\r\n    finishItem=(idtag,type)=>{\r\n        if(type==='todo'){\r\n            let todo=[...this.state.todo];\r\n            let change=todo.splice(idtag,1)[0];\r\n            let done =[...this.state.done,change];\r\n            this.setState({\r\n                done: done,\r\n                todo: todo\r\n            }, () => {\r\n                localStorage.setItem('done', JSON.stringify(this.state.done));\r\n                localStorage.setItem('todo', JSON.stringify(this.state.todo));\r\n            })\r\n        }else if(type==='done'){\r\n            let done=[...this.state.done];\r\n            let change1=done.splice(idtag,1)[0];\r\n            let todo=[...this.state.todo,change1];\r\n            this.setState({\r\n                todo:todo,\r\n                done:done\r\n            },()=>{\r\n                localStorage.setItem('done', JSON.stringify(this.state.done));\r\n                localStorage.setItem('todo', JSON.stringify(this.state.todo));\r\n            })\r\n        }\r\n    }\r\n    delItem=(idtag,type)=>{\r\n        if(type==='todo'){\r\n            var todo=[...this.state.todo]\r\n            todo.splice(idtag,1);\r\n            this.setState({\r\n                todo:todo\r\n            },()=>{\r\n                localStorage.setItem('todo', JSON.stringify(todo));\r\n            })\r\n            console.log(idtag);\r\n        }else if(type==='done'){\r\n            var done=[...this.state.done]\r\n            done.splice(idtag,1);\r\n            this.setState({\r\n                done:done\r\n            },()=>{\r\n                localStorage.setItem('done', JSON.stringify(done));\r\n            })\r\n            console.log(idtag);\r\n        }\r\n       \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}></Todoinput>\r\n                <Todo delitem={this.delItem} todo={this.state.todo} done={this.state.done} changeTodo={this.finishItem}></Todo>   \r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport TodoList from './TodoList/TodoList'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <TodoList />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}